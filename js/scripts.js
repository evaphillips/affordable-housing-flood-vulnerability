mapboxgl.accessToken = 'pk.eyJ1IjoiZXZhZXBoaWxsaXBzIiwiYSI6ImNsdWx1NDdlZjE4MnQyam51azZlcmtyanEifQ.Q6njVImsbV0wSX9Q6Y9U3Q';
const map = new mapboxgl.Map({
    container: 'map',
    style: 'mapbox://styles/mapbox/light-v11', /*style: 'mapbox://styles/mapbox/street-v12',*/
    zoom: 10,
    center: [-74.04525, 40.69268]
});

// Wait until the map has finished loading.
map.on('load', () => {

    // Add all layers

    map.addSource('2050-100-yr', {
        type: 'geojson',
        data: 'data/Coastal_Surge_Flooding_2050s_100_Year_project.geojson'
    });
    map.addLayer({
        'id': '100-Year Floodplain (2050s)',
        'type': 'fill',
        'source': '2050-100-yr',
        'layout': {
            'visibility': 'visible'
        },
        'paint': {
            'fill-color': "#3182bd",
            'fill-opacity': 0.5,
            'fill-outline-color': 'transparent'
        }
    });

    map.addSource('2080-100-yr', {
        type: 'geojson',
        data: 'data/Coastal_Surge_Flooding_2080s_100_Year_project.geojson'
    });
    map.addLayer({
        'id': '100-Year Floodplain (2080s)',
        'type': 'fill',
        'source': '2080-100-yr',
        'layout': {
            // Make the layer invisible by default.
            'visibility': 'none'
        },
        'paint': {
            'fill-color': "#08519c",
            'fill-opacity': 0.5,
            'fill-outline-color': 'transparent'
        }
    });

    map.addSource('vulnerability_index', {
        type: 'geojson',
        data: 'data/floodvulnerabilityindex_2020_project.geojson'
    });

    map.addLayer({
        'id': 'Coastal Surge Flooding (2050s)',
        'type': 'fill',
        'source': 'vulnerability_index',
        'layout': {
            // Make the layer visible by default.
            'visibility': 'none'
        },
        paint: {
            'fill-color': {
                property: 'SS_2050',
                type: 'categorical',
                stops: [
                    ['1', '#f2f0f7'],
                    ['2', '#cbc9e2'],
                    ['3', '#9e9ac8'],
                    ['4', '#756bb1'],
                    ['5', '#54278f'],
                    [" ", "transparent"] // Set color to transparent for empty string
                ],
            },
            'fill-opacity': 0.5, // Adjust opacity as needed (0 to 1),
            'fill-outline-color': 'transparent' // Change the outline color here
        }
    });

    map.addLayer({
        'id': 'Coastal Surge Flooding (2080s)',
        'type': 'fill',
        'source': 'vulnerability_index',
        'layout': {
            // Make the layer visible by default.
            'visibility': 'none'
        },
        paint: {
            'fill-color': {
                property: 'SS_2080',
                type: 'categorical',
                stops: [
                    ['1', '#f2f0f7'],
                    ['2', '#cbc9e2'],
                    ['3', '#9e9ac8'],
                    ['4', '#756bb1'],
                    ['5', '#54278f'],
                    [" ", "transparent"] // Set color to transparent for empty string
                ],
            },
            'fill-opacity': 0.5, // Adjust opacity as needed (0 to 1),
            'fill-outline-color': 'transparent' // Change the outline color here
        }
    });

    map.addSource('nhpd_properties', {
        type: 'geojson',
        data: 'data/nhpd.geojson'
    });

    map.addLayer({
        'id': 'Subsidized Housing',
        'type': 'circle',
        'source': 'nhpd_properties',
        'layout': {
            // Make the layer visible by default.
            'visibility': 'visible'
        },
        'paint': {
            'circle-color': {
                property: 'Category',
                type: 'categorical',
                stops: [
                    ['Public Housing', '#fabc5a'],
                    ['LIHTC', '#d95f02'],
                    ['Section 8', '#e7298a'],
                    ['Other HUD', '#7570b3'],
                    ['Multiple', '#66a61e']
                ]
            },
            'circle-opacity': 1,
            'circle-radius': 2.7
        }
    });

    // Set zoom-dependent styling for point size
    map.on('zoom', function () {
        map.setPaintProperty('Subsidized Housing', 'circle-radius', [
            'interpolate',
            ['linear'],
            ['zoom'],
            // Define zoom levels and corresponding circle radii
            0, 2,
            5, 2.5,
            10, 3,
            15, 5
            // Add more zoom levels and corresponding radii as needed
        ]);
    });


    // Add first set of toggle buttons for layers
    const toggleableLayerIds = ['100-Year Floodplain (2050s)', '100-Year Floodplain (2080s)'];

    for (const id of toggleableLayerIds) {
        const link = document.createElement('a');
        link.id = id;
        link.href = '#';
        link.textContent = id;
        link.className = 'inactive'; // Initially set as inactive

        link.onclick = function (e) {
            const clickedLayer = this.textContent;
            e.preventDefault();
            e.stopPropagation();

            if (this.classList.contains('active')) {
                // If the clicked button is already active, turn off the layer
                this.classList.remove('active');
                this.classList.add('inactive');
                map.setLayoutProperty(clickedLayer, 'visibility', 'none');
            } else {
                // Deactivate all toggle buttons
                toggleableLayerIds.forEach(layerId => {
                    const button = document.getElementById(layerId);
                    button.classList.remove('active');
                    button.classList.add('inactive');
                    map.setLayoutProperty(layerId, 'visibility', 'none');
                });

                // Activate the clicked toggle button
                this.classList.remove('inactive');
                this.classList.add('active');
                map.setLayoutProperty(clickedLayer, 'visibility', 'visible');
            }
        };

        const layers = document.getElementById('menu');
        layers.appendChild(link);
    }



    // Add second set of toggle buttons for layers
    const toggleableLayerIds2 = ['Coastal Surge Flooding (2050s)', 'Coastal Surge Flooding (2080s)'];

    for (const id of toggleableLayerIds2) {
        const link = document.createElement('a');
        link.id = id;
        link.href = '#';
        link.textContent = id;
        link.className = 'inactive'; // Initially set as inactive

        link.onclick = function (e) {
            const clickedLayer = this.textContent;
            e.preventDefault();
            e.stopPropagation();

            if (this.classList.contains('active')) {
                // If the clicked button is already active, turn off the layer
                this.classList.remove('active');
                this.classList.add('inactive');
                map.setLayoutProperty(clickedLayer, 'visibility', 'none');
            } else {
                // Deactivate all toggle buttons
                toggleableLayerIds2.forEach(layerId => {
                    const button = document.getElementById(layerId);
                    button.classList.remove('active');
                    button.classList.add('inactive');
                    map.setLayoutProperty(layerId, 'visibility', 'none');
                });

                // Activate the clicked toggle button
                this.classList.remove('inactive');
                this.classList.add('active');
                map.setLayoutProperty(clickedLayer, 'visibility', 'visible');
            }
        };

        const layers = document.getElementById('menu-2');
        layers.appendChild(link);
    }



    // Update button classes based on layer visibility
    map.on('idle', function () {
        for (const id of toggleableLayerIds.concat(toggleableLayerIds2)) {
            const link = document.getElementById(id);
            const visibility = map.getLayoutProperty(id, 'visibility');
            if (visibility === 'visible') {
                link.classList.add('active');
                link.classList.remove('inactive');
            } else {
                link.classList.add('inactive');
                link.classList.remove('active');
            }
        }
    });

});

// Add click event for NHPD pop-up
map.on('click', 'Subsidized Housing', function (e) {
    // Get the feature that was clicked
    const feature = e.features[0];


    // Construct popup HTML
    const popupHtml = `
        <h3>Name: ${feature.properties.PropertyName}</h3>
        <p>Subsidy Source: ${feature.properties.Category}</p>
        <p>Address: ${feature.properties.PropertyAddress}</p>
        <p>Total Units: ${feature.properties.TotalUnits}</p>
        <!-- Add other properties you want to display -->
    `;

    // Create a popup 
    new mapboxgl.Popup()
        .setLngLat(feature.geometry.coordinates)
        .setHTML(popupHtml)
        .addTo(map);
});

// Change cursor to pointer when hovering over points
map.on('mouseenter', 'Subsidized Housing', function () {
    map.getCanvas().style.cursor = 'pointer';
});

// Change cursor back to default when not hovering over points
map.on('mouseleave', 'Subsidized Housing', function () {
    map.getCanvas().style.cursor = '';
});


// Select the info icon elements
const infoIcon1 = document.getElementById('info-icon1');
const infoIcon2 = document.getElementById('info-icon2');

// Function to show the pop-up
function showPopup(event, popupContent) {
    const popup = document.createElement('div');
    popup.classList.add('popup');
    popup.textContent = popupContent;
    popup.style.position = 'absolute';
    popup.style.top = `${event.clientY}px`;
    popup.style.left = `${event.clientX}px`;
    document.body.appendChild(popup);

    // Remove the pop-up when the mouse leaves the icon
    event.target.addEventListener('mouseleave', () => {
        document.body.removeChild(popup);
    });
}

// Event listeners for hovering over the info icons
infoIcon1.addEventListener('mouseenter', (event) => {
    showPopup(event, 'This layer shows future floodplains based on coastal storm surge data, the abnormal rise in seawater during a storm, which is projected to increase in severity and frequency due to climate change.');
});

infoIcon2.addEventListener('mouseenter', (event) => {
    showPopup(event, 'On a scale of 1 (lowest vulnerability) to 5 (highest vulnerability) this layer shows vulnerability to storm surge flooding based on sea level rise estimates and socio-demographic factors that have been observed to correlate with greater harm suffered due to flooding or lower capacity to recover from flooding (i.e., low-income households, older adults living alone, language isolation, disability, BIPOC households, more). ');
});


/// Add event listeners for layer visibility change
map.on('idle', function () {
    // Check if either of the layers 'Coastal Surge Flooding (2050s)' or 'Coastal Surge Flooding (2080s)' is visible
    var isLayer2050sVisible = map.getLayoutProperty('Coastal Surge Flooding (2050s)', 'visibility') === 'visible';
    var isLayer2080sVisible = map.getLayoutProperty('Coastal Surge Flooding (2080s)', 'visibility') === 'visible';

    // Determine if either of the layers is visible
    var isAnyLayerVisible = isLayer2050sVisible || isLayer2080sVisible;

    // Get the legend element
    var legendIndex = document.getElementById('legend-index');

    // Toggle the visibility of the legend based on layer visibility
    if (isAnyLayerVisible) {
        legendIndex.style.display = 'block'; // Show the legend
    } else {
        legendIndex.style.display = 'none'; // Hide the legend
    }
});


